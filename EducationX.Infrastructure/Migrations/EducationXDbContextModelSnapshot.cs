// <auto-generated />
using System;
using EducationX.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationX.Infrastructure.Migrations
{
    [DbContext(typeof(EducationXDbContext))]
    partial class EducationXDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationX.Domain.Entities.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AcademicRanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Professor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Associate professor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Assistant Professor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lecturer"
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Acting classes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Paleontology"
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnrolled")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            DateEnrolled = new DateTime(2021, 6, 13, 23, 25, 34, 20, DateTimeKind.Utc).AddTicks(4647),
                            StudentId = 4
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            DateEnrolled = new DateTime(2021, 3, 15, 23, 25, 34, 20, DateTimeKind.Utc).AddTicks(6645),
                            StudentId = 4
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            DateEnrolled = new DateTime(2021, 2, 13, 23, 25, 34, 20, DateTimeKind.Utc).AddTicks(6710),
                            StudentId = 5
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            DateEnrolled = new DateTime(2021, 3, 18, 23, 25, 34, 20, DateTimeKind.Utc).AddTicks(6714),
                            StudentId = 6
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            DateEnrolled = new DateTime(2020, 5, 6, 23, 25, 34, 20, DateTimeKind.Utc).AddTicks(6715),
                            StudentId = 7
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.StudentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<int>("StudentEnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentEnrollmentId");

                    b.ToTable("StudentGrades");

                    b.HasCheckConstraint("CK_StudentGrade_Grade", "[Grade] BETWEEN 1 AND 100");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1345),
                            Grade = (byte)31,
                            StudentEnrollmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1747),
                            Grade = (byte)4,
                            StudentEnrollmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1764),
                            Grade = (byte)63,
                            StudentEnrollmentId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1781),
                            Grade = (byte)6,
                            StudentEnrollmentId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1797),
                            Grade = (byte)94,
                            StudentEnrollmentId = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1815),
                            Grade = (byte)20,
                            StudentEnrollmentId = 3
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 6, 13, 23, 25, 34, 22, DateTimeKind.Utc).AddTicks(1832),
                            Grade = (byte)98,
                            StudentEnrollmentId = 5
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeacherCourse");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            CourseId = 4
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("EducationX.Domain.Entities.User");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1993, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Georgi",
                            LastName = "Findulov"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1990, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1999, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mark",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1997, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Charlotte",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Teacher", b =>
                {
                    b.HasBaseType("EducationX.Domain.Entities.User");

                    b.Property<int>("AcademicRankId")
                        .HasColumnType("int");

                    b.HasIndex("AcademicRankId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1967, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Joey",
                            LastName = "Tribbiani",
                            AcademicRankId = 4
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1967, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ross",
                            LastName = "Geller",
                            AcademicRankId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1980, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Evelyn",
                            LastName = "Harper",
                            AcademicRankId = 1
                        });
                });

            modelBuilder.Entity("EducationX.Domain.Entities.StudentEnrollment", b =>
                {
                    b.HasOne("EducationX.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationX.Domain.Entities.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.StudentGrade", b =>
                {
                    b.HasOne("EducationX.Domain.Entities.StudentEnrollment", "StudentEnrollment")
                        .WithMany()
                        .HasForeignKey("StudentEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentEnrollment");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.TeacherCourse", b =>
                {
                    b.HasOne("EducationX.Domain.Entities.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationX.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Student", b =>
                {
                    b.HasOne("EducationX.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("EducationX.Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("EducationX.Domain.Entities.AcademicRank", "AcademicRank")
                        .WithMany()
                        .HasForeignKey("AcademicRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationX.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("EducationX.Domain.Entities.Teacher", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AcademicRank");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseTeachers");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Student", b =>
                {
                    b.Navigation("EnrolledCourses");
                });

            modelBuilder.Entity("EducationX.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
